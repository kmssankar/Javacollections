													COLLECTIONS

Collections are like containers that groups multiple items in a single unit. For example; a jar of chocolates, list of names etc. 
Collections are used almost in every programming language and when Java arrived,it also came with few Collection classes; Vector, Stack, Hashtable, Array. 

Java 1.2 provided Collections Framework that is architecture to represent and manipulate Collections in java in a standard way. 
Java Collections Framework consists of following parts:

Interfaces: Java Collections Framework interfaces provides the abstract data type to represent collection. 
java.util.Collection is the root interface of Collections Framework. 
It is on the top of Collections framework hierarchy. 
It contains some important methods such as size(), iterator(), add(), remove(), clear() that every Collection class must implement. 
Some other important interfaces are java.util.List, java.util.Set, java.util.Queue and java.util.Map. Map is the only interface that doesn’t inherits from Collection interface but it’s part of Collections framework. 
All the collections framework interfaces are present in java.util package.
Implementation Classes: Collections in Java provides core implementation classes for collections. 
We can use them to create different types of collections in java program. Some important collection classes are ArrayList, LinkedList, HashMap, TreeMap, HashSet, TreeSet.
These classes solve most of our programming needs but if we need some special collection class, we can extend them to create our custom collection class.
Java 1.5 came up with thread-safe collection classes that allowed to modify Collections while iterating over it, some of them are CopyOnWriteArrayList, ConcurrentHashMap, CopyOnWriteArraySet. These classes are in java.util.concurrent package. All the collection classes are present in java.util and java.util.concurrent package.

Algorithms: Algorithms are useful methods to provide some common functionalities, for example searching, sorting and shuffling.
Below class diagram shows Collections Framework hierarchy. For simplicity I have included only commonly used interfaces and classes.

LIST Interface:
---------------
List is an ordered collection and can contain duplicate elements. 
You can access any element from it’s index. List is more like array with dynamic length. 
List is one of the most used Collection type. ArrayList and LinkedList are implementation classes of List interface.

List interface provides useful methods to add an element at specific index, remove/replace element based on index 
and to get a sub-list using index.

SET Interface:
-------------
Earlier we have shared tutorials on HashSet and TreeSet. LinkedHashSet is also an implementation of Set interface, it is similar to the HashSet and TreeSet except the below mentioned differences:

HashSet doesn’t maintain any kind of order of its elements.
TreeSet sorts the elements in ascending order.
LinkedHashSet maintains the insertion order. Elements gets sorted in the same sequence in which they have been added to the Set.

MAP Interface:
-------------
Java Map is an object that maps keys to values.
 A map cannot contain duplicate keys: Each key can map to at most one value.
The Java platform contains three general-purpose Map implementations: HashMap, TreeMap, and LinkedHashMap.
The basic operations of Map are put, get, containsKey, containsValue, size, and isEmpty.

collection Synchronization:
---------------------------
There are three groups of Collections.
Java 1.0 collections which mostly legacy classes. This includes Hashtable, Vector, Stack. These are synchronized but I don't recommend you use them. Properties is perhaps one exception, but I wouldn't use it in a multi-threaded context.
Java 1.2 collections added in 1998 which largely replaced these collection are not synchronized, but can be synchronized using Collections.synchronizedXxx() methods
Java 5.0 concurrency collections added in 2004 support lock free, thread safe collections.

Synchronized Wrappers:
---------------------
The synchronization wrappers add automatic synchronization (thread-safety) to an arbitrary collection. 
Each of the six core collection interfaces — Collection, Set, List, Map, SortedSet, and SortedMap — has one static factory method.
public static  Collection synchronizedCollection(Collection c);
public static  Set synchronizedSet(Set s);
public static  List synchronizedList(List list);
public static <K,V> Map<K,V> synchronizedMap(Map<K,V> m);
public static  SortedSet synchronizedSortedSet(SortedSet s);
public static <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m);
Each of these methods returns a synchronized (thread-safe) Collection backed up by the specified collection.

Unmodifiable wrappers
---------------------
Unmodifiable wrappers take away the ability to modify the collection by intercepting all the operations that would modify the collection and throwing an UnsupportedOperationException. 
It’s main usage are;
To make a collection immutable once it has been built. In this case, it’s good practice not to maintain a reference to the backing collection. This absolutely guarantees immutability.
To allow certain clients read-only access to your data structures. You keep a reference to the backing collection but hand out a reference to the wrapper. In this way, clients can look but not modify, while you maintain full access.
These methods are;
public static  Collection unmodifiableCollection(Collection<? extends T> c);
public static  Set unmodifiableSet(Set<? extends T> s);
public static  List unmodifiableList(List<? extends T> list);
public static <K,V> Map<K, V> unmodifiableMap(Map<? extends K, ? extends V> m);
public static  SortedSet unmodifiableSortedSet(SortedSet<? extends T> s);
public static <K,V> SortedMap<K, V> unmodifiableSortedMap(SortedMap<K, ? extends V> m);
